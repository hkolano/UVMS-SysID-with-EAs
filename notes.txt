#1 Run
0.0... --------------- NEW ITERATION -------------------
State
[0.9628103902351041, 
0.033568215766041236, 
0.04353444749393931, 
0.26452614091429316, 
1.098127665439032, 
0.09165604745290663, 
0.3298418257136263, 
-0.01596385955810531, 
0.10000836104154587, 
1.6700737476348877, 
-2.851723903134465]

[0.0, 
0.0, 
0.0, 
-0.001137420032788892, 
-0.021402863816574517, 
0.029295904668215418, 
0.0, 
0.0, 
0.0, 
0.0]

Control torques:
[0.0, 
0.0, 
0.0, 
0.0, 
0.0, 
0.0, 
0.01113 947575575479, 
-0.22255, 
-0.0704 8042959156957, 
-0.00013 460486855154663]

Hydro Wrenches
Dict{BodyID, Wrench{Float64}}(BodyID(5) => Wrench expressed in "world":
angular: [-0.16428884677549108, 1.2804324179731463, 0.0001735147766033911], linear: [-8.114862143152958e-5, 0.00011273685714936791, -0.8838472254856001], BodyID(4) => Wrench expressed in "world":
angular: [-0.32920204818610027, 3.128010982567779, 0.0009319613617448533], linear: [-0.00044316049127382946, 0.0006155356959799828, -2.2232342867758716], BodyID(6) => Wrench expressed in "world":
angular: [-0.4560920191667949, 3.105049118652327, 0.0017892783980033586], linear: [-0.0007148153513487312, 0.0010857687554770476, -2.0467802721907598], BodyID(2) => Wrench expressed in "world":
angular: [1.052505911676776, -9.899313557500514, 0.0024080692817401634], linear: [-0.001391951198080842, 0.0020767062049793636, 6.90401278036527], BodyID(3) => Wrench expressed in "world":
angular: [-0.21936713819590453, 2.374945041418028, 0.00016677687984091016], linear: [-8.478314469930646e-5, 0.00011406973876223385, -1.7273353401432374])
result:
[-0.6145690686675694, -1.465999595216367, 0.7307111624141197, 0.07647269080082038, 0.010090672569799184, 0.02424845532303047, -2.6976843300442837, -19.17367044119186, -10.953206880861904, -18.232128734210836]

#2 Run
0.0... --------------- NEW ITERATION -------------------
State
[0.9628103902351041, 
0.033568215766041236, 
0.04353444749393931, 
0.26452614091429316, 
1.098127665439032, 
0.09165604745290663, 
0.3298418257136263, 
-0.01596385955810531, 
0.10000836104154587, 
1.6700737476348877, 
-2.851723903134465]

[0.0, 
0.0, 
0.0, 
-0.001137420032788892, 
-0.021402863816574517, 
0.029295904668215418, 
0.0, 
0.0, 
0.0, 
0.0]

Control torques:
[0.0, 
0.0, 
0.0, 
0.0, 
0.0, 
0.0, 
0.01113 5479083965146, 
-0.22255, 
-0.0704 2814640926813, 
-0.00013 522646788599602]

Hydro Wrenches
Dict{BodyID, Wrench{Float64}}(BodyID(5) => Wrench expressed in "world":
angular: [-0.16428884677549108, 1.2804324179731463, 0.0001735147766033911], linear: [-8.114862143152958e-5, 0.00011273685714936791, -0.8838472254856001], BodyID(4) => Wrench expressed in "world":
angular: [-0.32920204818610027, 3.128010982567779, 0.0009319613617448533], linear: [-0.00044316049127382946, 0.0006155356959799828, -2.2232342867758716], BodyID(6) => Wrench expressed in "world":
angular: [-0.4560920191667949, 3.105049118652327, 0.0017892783980033586], linear: [-0.0007148153513487312, 0.0010857687554770476, -2.0467802721907598], BodyID(2) => Wrench expressed in "world":
angular: [1.052505911676776, -9.899313557500514, 0.0024080692817401634], linear: [-0.001391951198080842, 0.0020767062049793636, 6.90401278036527], BodyID(3) => Wrench expressed in "world":
angular: [-0.21936713819590453, 2.374945041418028, 0.00016677687984091016], linear: [-8.478314469930646e-5, 0.00011406973876223385, -1.7273353401432374])
result:
[-0.6146081777728908, -1.4661327851613914, 0.7306494112506793, 0.07645564212687399, 0.010093013393714075, 0.024251859488958746, -2.6976637104513514, -19.170589592812934, -10.945116293827, -18.241135903572598]

---------------------------------------------

128.33442000000002

----------------------------------------------
the jupyter notebook isn't working
body_dict, body_names, cob_vec_dict, com_vec_dict
one of these is causing issues. Something to do with a typing issue
I think that in julia there is an important difference between
a vector of a particular size (fixed size vector) versus one that is a dynamic size

body_dict, body_names, cob_vec_dict, com_vec_dict

i commented out where I overwrite the cob and com vec dict
-----------------------------------------------------------
OUTPUT FROM LEARN.IPYNB
This is with all the default parameters so it should be the same as mainpitchvalidation.jl
#1
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.6715044281495235
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.0302242062734592
#2
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.6928119606721457
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.0431191770000905
#3
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.8317481221208936
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.2194271197263946
#4
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.6295399043210472
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.993477963827737
#5
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.5793787875013345
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.9062781818660666
#6
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.8282580319193498
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.214668713916473
#7
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.645188465259392
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.9717390427041666
#8
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.5788061048608077
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.9258221571509273
#9
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.7309411647151234
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.0962904816961037
#10
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.7900855127101614
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.1570439095252083


-----------------------------------------------------------
OUTPUT FROM MAINPITCHVALIDATION.JL
Sim is stochastic. I'll run it a few times to see what I get
That way I can compare more like sets of data instead of just expecting data points to match up
These are data points collected before I have the code for setting parameters
#1
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.6944317914899205
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.0545185035620923
#2
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.5212920605966738
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.8341822698120078
#3
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.9316330314622716
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.3278665902707645
#4
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.61744412559349
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.943121439076739
#5
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.529554838402711
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.8553108784479704
#6
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.62403795750847
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.965533143554878
#7
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.626773707735718
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.9682752651704627
#8
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.7582526148580038
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.14258302987484
#9
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.9393873086608857
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.3312833103943364
#10
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.6912900467819814
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.0406567264637645

------------------------------------------------------------
JuliaError: Exception 'MethodError: no method matching setindex!(::Float64, ::Float64, ::String)' occurred while calling julia code:
buoyancy_mag_dict["vehicle"]["volume"] = input_buoyancy_mag_dict["vehicle"]["volume"]

sim_offset = 3.7
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.55579274307985
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.8760109028632515

sim_offset = 3.7
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.7569682417978805
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 2.129633258990988



-----------------------------------------------------------------------------
# Running the simulator with the default parameters
sim_offset = 3.7
rad2deg(get_pitch_rmse(imu_df, sim_df)) = 2.538996532740459
rad2deg(get_pitch_rmse(imu_df, sim_df, true, -1.0)) = 1.8589122763755392



[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106]
{'cob_vec_dict': {'vehicle': [0, 1, 2], 
'foamL': [3, 4, 5], 
'foamR': [6, 7, 8], 
'shoulder': [9, 10, 11], 
'upperarm': [12, 13, 14], 
'elbow': [15, 16, 17], 
'wrist': [18, 19, 20], 
'jaw': [21, 22, 23]}, 

'bouyancy_mag_dict': 
{'vehicle': {'volume': 24}, 
'foamL': 25, 
'foamR': 26}, 

'com_vec_dict': 
{'vehicle': [27, 28, 29], 
'weightCA': [30, 31, 32], 
'weightBL': [33, 34, 35], 
'weightBR': [36, 37, 38], 
'dvl': [39, 40, 41], 
'dvlbracket': [42, 43, 44], 
'armbase': [45, 46, 47], 
'shoulder': [48, 49, 50], 
'upperarm': [51, 52, 53], 
'elbow': [54, 55, 56], 
'wrist': [57, 58, 59], 
'jaw': [60, 61, 62], 
'jaw_wrt_wrist': [63, 64, 65]}, 

'grav_mag_dict': {'vehicle': {'weight': 66}, 
'weightCA': 67, 
'weightBL': 68, 
'weightBR': 69, 
'dvl': 70, 
'dvlbracket': 71}, 

'drag': {'d_lin_angular': 72, 
'd_nonlin_angular': 73, 
'd_lin_coeffs': [74, 75, 76], 
'd_nonlin_coeffs': [77, 78, 79]}, 

'link_volumes': {'shoulder': 80, 
'uppperarm': 81, 
'elbow': 82, 
'wrist': 83, 
'armbase': 84, 
'jaw': 85}, 

'link_masses': {'shoulder': 86, 
'upperarm': 87, 
'elbow': 88, 
'wrist': 89, 
'armbase': 90, 
'jaw': 91}, 

'link_drags': {
    'shoulder': [92, 93, 94], 
    'upperarm': [95, 96, 97], 
    'elbow': [98, 99, 100], 
    'wrist': [101, 102, 103], 
    'jaw': [104, 105, 106]}}

{'cob_vec_dict': 
{'vehicle': [0, 1, 2], 
'foamL': [3, 4, 5], 
'foamR': [6, 7, 8], 
'shoulder': [9, 10, 11], 
'upperarm': [12, 13, 14], 
'elbow': [15, 16, 17], 
'wrist': [18, 19, 20], 
'jaw': [21, 22, 23]}, 
'bouyancy_mag_dict': 
{'vehicle': {'volume': 24}, 
'foamL': 25, 
'foamR': 26},
'com_vec_dict': 
{'vehicle': [27, 28, 29], 
'weightCA': [30, 31, 32], 
'weightBL': [33, 34, 35], 
'weightBR': [36, 37, 38], 
'dvl': [39, 40, 41], 
'dvlbracket': [42, 43, 44], 
'armbase': [45, 46, 47], 
'shoulder': [48, 49, 50], 
'upperarm': [51, 52, 53], 
'elbow': [54, 55, 56], 
'wrist': [57, 58, 59], 
'jaw': [60, 61, 62], 
'jaw_wrt_wrist': [63, 64, 65]}, 
'grav_mag_dict': {'vehicle': {'weight': 66}, 
'weightCA': 67, 
'weightBL': 68, 
'weightBR': 69, 
'dvl': 70, 
'dvlbracket': 71}, 
'drag': 
{'d_lin_angular': 72, 
'd_nonlin_angular': 73, 
'd_lin_coeffs': [74, 75, 76], 
'd_nonlin_coeffs': [77, 78, 79]}, 
'link_volumes': 
{'shoulder': 80, 
'upperarm': 81, 
'elbow': 82, 
'wrist': 83, 
'armbase': 84, 
'jaw': 85}, 
'link_masses': 
{'shoulder': 86, 
'upperarm': 87, 
'elbow': 88, 
'wrist': 89, 
'armbase': 90, 
'jaw': 91}, 
'link_drags': 
{'shoulder': [92, 93, 94], 
'upperarm': [95, 96, 97], 
'elbow': [98, 99, 100], 
'wrist': [101, 102, 103], 
'jaw': [104, 105, 106]}}
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 45, 46, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106]
